#!/bin/sh

# Build portable binary release tarballs for Linux/x64 and Linux/arm64.

set -e
set -u

export PATH='/usr/local/bin:/usr/bin:/bin'

myself=${0##*/}

info()
{
	echo "$myself: $*"
}

error()
{
	echo >&2 "$myself: $*"
}

usage()
{
	echo >&2 "Usage: $myself"
	exit 2
}

crosstool_vsn="${CTNG_VSN:-ee5a4026c3560c6b313313cf78236a60e300ee93}"
root_dir="${BUILD_DIR:-$HOME/build}"
bootstrap_dir="$root_dir/bootstrap"
ct_prefix_dir="$root_dir/x-tools"
crosstool_dir="crosstool-ng-$crosstool_vsn"
crosstool_tar="$crosstool_dir.tar.xz"
ct_jobs=$(nproc)
src_dir="$root_dir/src"
platform=$(gcc -dumpmachine)
platform_libc=$(echo $platform | sed "s/\-/\ /g" | awk '{print $NF}')
targets='x86_64-linux-gnu aarch64-linux-gnu x86_64-linux-musl aarch64-linux-musl'
build_start=$(date '+%F %T')

umask 022

#' Create common part of Crosstool-NG configuration file.
create_common_config()
{
	local file="$1"

	cat >"$file" <<-'EOF'
		CT_CONFIG_VERSION="4"
		CT_DOWNLOAD_AGENT_CURL=y
		CT_OMIT_TARGET_VENDOR=y
		CT_CC_LANG_CXX=y
		CT_ARCH_64=y
		CT_KERNEL_LINUX=y
		CT_LOG_PROGRESS_BAR=n
		CT_BINUTILS_V_2_38=y
	EOF
}
#.

#' Create Crosstool-NG configuration file for glibc.
create_gnu_config()
{
	local file="$1"

	create_common_config "$file"

	cat >>"$file" <<-'EOF'
		CT_LINUX_V_3_16=y
		CT_GLIBC_V_2_19=y
		CT_GLIBC_KERNEL_VERSION_NONE=y
	EOF
}
#.

#' Create Crosstool-NG configuration file for musl.
create_musl_config()
{
	local file="$1"

	create_common_config "$file"

	cat >>"$file" <<-'EOF'
		CT_EXPERIMENTAL=y
		CT_LIBC_MUSL=y
		CT_MUSL_V_1_2_2=y
	EOF
}
#.

#' Create Crosstool-NG configuration file for x64.
create_x64_config()
{
	local file="$1"
	local libc="$2"

	create_common_config "$file"
	create_${libc}_config "$file"

	cat >>"$file" <<-'EOF'
		CT_ARCH_X86=y
	EOF
}
#.

#' Create Crosstool-NG configuration file for arm64.
create_arm64_config()
{
	local file="$1"
	local libc="$2"

	create_common_config "$file"
	create_${libc}_config "$file"

	cat >>"$file" <<-'EOF'
		CT_ARCH_ARM=y
	EOF
}
#.

#' Return our name for the given platform.
arch_name()
{
	local target="$1"

	case $target in
	x86_64*)
		printf 'x64'
		;;
	aarch64*)
		printf 'arm64'
		;;
	*)
		error "Unsupported target platform: $target"
		exit 1
		;;
	esac
}
#.

#' Build toochain for a given target.
build_toolchain()
{
	local target="$1"
	local prefix="$2"
	local libc="$3"
	local arch=$(arch_name "$target")

	if [ -d "$prefix" ]
	then
		info "Using existing toolchain in $prefix ..."
	else
		if ! [ -x "$bootstrap_dir/bin/ct-ng" ]
		then
			info "Extracting Crosstool-NG $crosstool_vsn ..."
			mkdir -p "$src_dir/$crosstool_dir"
			cd "$src_dir/$crosstool_dir"
			git clone https://github.com/crosstool-ng/crosstool-ng.git .
			git checkout "$crosstool_vsn"
			cd "$OLDPWD"

			info "Building Crosstool-NG $crosstool_vsn ..."
			cd "$src_dir/$crosstool_dir"
			./bootstrap
			./configure --prefix="$bootstrap_dir"
			make V=0
			make install
			cd "$OLDPWD"
		fi

		info "Building toolchain for $arch-$libc ..."
		cd "$root_dir"
		create_${arch}_config 'defconfig' "$libc"
		ct-ng defconfig
		sed -i 's|^CT_ZLIB_MIRRORS=.*|CT_ZLIB_MIRRORS="https://github.com/madler/zlib/releases/download/v${CT_ZLIB_VERSION} https://www.zlib.net/ https://www.zlib.net/fossils/"|' '.config'
		ct-ng build CT_PREFIX="$ct_prefix_dir" CT_JOBS="$ct_jobs"
		rm -rf 'defconfig' '.config'* '.build' 'build.log'
		cd "$OLDPWD"
	fi
}
#.

if ! mkdir -p "$root_dir"
then
	error 'Set BUILD_DIR to a usable build directory path.'
	exit 1
fi

info 'Removing old bootstrap tools ...'
rm -rf "$bootstrap_dir"
mkdir "$bootstrap_dir"

info 'Removing old source ...'
rm -rf "$src_dir"
mkdir "$src_dir"

export PATH="$bootstrap_dir/bin:$PATH" # For Rebar3 and possibly ct-ng.

for target in $targets
do
	libc="$(echo $target | sed "s/\-/\ /g" | awk '{print $NF}')"
	toolchain_dir="$ct_prefix_dir/$target"
	build_toolchain "$target" "$toolchain_dir" "$libc"
done

info "Build started: $build_start"
info "Build ended: $(date '+%F %T')"

# vim:set foldmarker=#',#. foldmethod=marker:
